name: "CycloneDX SBOM reusable workflow"

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
        description: "The Docker image to scan."
        # i.e: "example/image_name:tag"
      filename:
        required: true
        type: string
        description: "The generated SBOM file name"
      upload-artifact:
        required: false
        type: boolean
        description: "Attach the SBOM to the workflow"
        default: true
      upload-release-assets:
        required: false
        type: boolean
        description: "Attach the SBOM to the release"
        default: true
      syft-version:
        required: false
        type: string
        description: "Syft version"
        default: v0.105.0
    secrets:
      GPG_PRIVATE_KEY_PASSPHRASE:
        required: false
        description: "Required when 'upload-artifact' is true"
      GPG_PRIVATE_KEY_BASE64:
        required: false
        description: "Required when 'upload-artifact' is true"


jobs:
  sbom:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
        with:
          image: ${{ inputs.image }}
          artifact-name: ${{ inputs.filename }}
          output-file: ${{ inputs.filename }}
          format: cyclonedx-json
          syft-version: ${{ inputs.syft-version }}
          upload-artifact: ${{ inputs.upload-artifact }}
          upload-release-assets: ${{ inputs.upload-release-assets }}
        env:
          SYFT_QUIET: true
      - name: get secrets
        id: secrets
        uses: SonarSource/vault-action-wrapper@d6d745ffdbc82b040df839b903bc33b5592cd6b0 # 3.0.2
        with:
          secrets: |
            development/kv/data/sign passphrase | gpg_passphrase;
            development/kv/data/sign key | gpg_key;
      - name: Sign CycloneDX SBOM
        if: inputs.upload-artifact
        shell: bash
        env:
          GPG_PRIVATE_KEY_PASSPHRASE: ${{ fromJSON(steps.secrets.outputs.vault).gpg_passphrase }}
          GPG_PRIVATE_KEY_BASE64: ${{ fromJSON(steps.secrets.outputs.vault).gpg_key }}
        run: |
          if [[ ! -v GPG_PRIVATE_KEY_PASSPHRASE || ! -v GPG_PRIVATE_KEY_BASE64 ]]; then exit 0; fi
          export GNUPGHOMEDIR=gnupg/
          mkdir --parent "${GNUPGHOMEDIR}"
          echo "${GPG_PRIVATE_KEY_PASSPHRASE}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --quiet --import <(echo "${GPG_PRIVATE_KEY_BASE64}")
          echo "${GPG_PRIVATE_KEY_PASSPHRASE}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --quiet --detach-sign --armor "${{ inputs.filename }}"
          rm -rf "${GNUPGHOMEDIR}"
      - uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        if: inputs.upload-artifact
        with:
          name: "${{ inputs.filename }}"
          path: |
            ${{ inputs.filename }}
            ${{ inputs.filename }}.asc
          overwrite: true
      - name: Upload binaries to release
        if: inputs.upload-release-assets && startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        with:
          repo_token: ${{ github.token }}
          file_glob: true
          file: "${{ inputs.filename }}?(.asc)"
          tag: ${{ github.ref }}
          overwrite: true
